
uniform sampler2D simData;
uniform float time;
float EPSILON = 0.1;

float noise(vec3 p) {
  return sin(p.x) * sin(p.y) * sin(p.z);
}

float fbm(vec3 p) {
  return noise(p + vec3(noise(p) + 50.0, noise(p), noise(p) + 20.0));
}

float pattern(vec3 p) {
  p.y += 10.0;
  float distortion = fbm(p * 0.5) / 0.5;
  distortion += fbm(p * 0.25) / 0.25;
  distortion += fbm(p * 0.125) / 0.125;
  distortion += fbm(p * 0.0625) / 0.0625;

  vec4 ground = vec4(0, 0.5, 0, 0.5);
  ground.w += distortion;
  ground = normalize(ground);
  return p.y*0.1 + (distortion-0.4) * (1.0-smoothstep(1.0, 3.0, p.y/5.0));
}

float scene(vec3 p) {
  return pattern(p);
}

/*
	Gets the normal direction at a given point in space.
	Compute the derivative of each spatial direction.
*/
vec3 getNormal(vec3 p, float d) {
	vec3 n1 = vec3(
        scene(vec3(p.x + EPSILON, p.y, p.z)),
        scene(vec3(p.x, p.y + EPSILON, p.z)),
        scene(vec3(p.x, p.y, p.z + EPSILON))
    );
	vec3 n2 = vec3(
        scene(vec3(p.x - EPSILON, p.y, p.z)),
        scene(vec3(p.x, p.y - EPSILON, p.z)),
        scene(vec3(p.x, p.y, p.z - EPSILON))
    );
  return normalize(n1 - d);
}

void main() {
	vec2 iuv = gl_FragCoord.xy;
	// current value
	vec3 objPos = texture2D(simData, vec2(0.)).xyz;
	float objWidth = 1.0;

	// sample normal of terrain at projected position
	// check if collides
	// fix projected position
	// add rotating impulse

	vec3 move = vec3(0., -0.01, 0.);

	float dist = scene(objPos);
	if(dist < -1.01) {
		vec3 norm = getNormal(objPos, dist);
		move.y = 0.;
		move += -norm * dist * 0.1;
	}


	vec3 result = objPos + move;

	gl_FragColor = vec4(result, 1.0);
}