const float EPSILON = 0.1;
const float E = 2.71828;
const float RT2 = 0.7071067;
const float PI = 3.1415;

uniform sampler2D simData;
uniform float time;
uniform mat4 camera;
varying vec3 vPosition;
varying mat4 vRotation;
varying vec2 vUv;

#extension GL_EXT_frag_depth : enable

float noise(vec3 co){
    return fract(sin(dot(co.xyz ,vec3(12.9898,78.233,129.13545))) * 43758.5453);
}

// helper function to create a 3d rotation matrix.
mat3 rotateX(float angle) {
    float ca = cos(angle);
    float sa = sin(angle);
	return mat3(1, 0, 0,  0, ca, -sa,  0, sa, ca);
}

// helper function to create a 3d rotation matrix.
mat3 rotateY(float angle) {
    float ca = cos(angle);
    float sa = sin(angle);
	return mat3(ca, 0, sa,  0, 1, 0,  -sa, 0, ca);
}

/*
	This function returns the distance from a specified point (p)
	to the edge of a sphere centered on c with radius r.

	Think of this as a 3d gradient which is black (0.0) at the edge of the sphere and
	progressively brighter as you move away from the sphere. Inside the sphere, the
	distance is negative up to -r at the center.
*/
float distanceSphere(vec3 p, vec3 c, float r) {
	return length(p - c) - r;
}


// simple function to get the distance from a plane
float plane(vec3 p, vec4 n) {
    return dot(p,n.xyz) + n.w;
}

/*
	This function gives the distance to a diamond cut object.
	h.x specifies the side length, h.y specifies the height
*/
float distanceDiamond(vec3 p, vec2 h) {
    // object is symmetrical about x and z axes
	vec3 q = vec3(abs(p.x), abs(p.y), abs(p.z));
    
    // specify the points that make up the object in the positive octant
    vec3 p1 = vec3(1.0, 0., 0.);
    vec3 p2 = vec3(RT2, 0., RT2);
    vec3 p3 = vec3(0., 1.0, 0.);
    vec3 p4 = vec3(0., 0., 1.0);
    
    // get the plane equations as a vec4 by using cross product on the points
    vec4 s1 = vec4(normalize(cross(p2-p1, p3-p1)), length(p1)+h.x);
    vec4 s2 = vec4(normalize(cross(p4-p2, p3-p2)), length(p2)+h.x);
    
    // get the farthest distance to one of the planes
    // p.y - h.y is the flat top of the diamond on one side
    // the second max gives the distance to one of the sides
    float dist = max(p.y - h.y, max(plane(q, -s1), plane(q, -s2)));
	return dist;
}

vec3 crystalDisplacement(vec3 p) {
	// voronoi normal displacement
    return vec3(0.);
}

float dirtMap(vec3 p) {
	// smudge
    float dirt = 1.0 - abs(-1.0+2.0*pow(noise(p * 5.0), 8.0));
    return dirt;
}

float fakeInternalReflection(vec3 p, vec3 view) {
	// cloudiness
    // far side
    // bubbles
    return 0.;
}

float detailMap(vec3 p) {
	// scratches
    float scratches = noise(p * vec3(5.0, 50.0, 100.0));
    // chips
    //float chips = 1.0 - abs(-1.0+2.0*pow(noise(p * 5.0), 8.0));
    return scratches;
}

/*
	Scene is a function that combines all the other distance functions and modifications
	so that for any given point, it returns the closest distance to something
	in the complete scene.
*/
float scene(vec3 p) {
    float ft = time * 4.0 / PI;
    float dirt = dirtMap(p);
    float detail = detailMap(p);
 	return distanceDiamond(p, vec2(0.2, 0.4)) - max(0., sin(ft)) * dirt * 1.0 - detail * 0.001;
}

/*
	Gets the normal direction at a given point in space.
	Compute the derivative of each spatial direction.
*/
vec3 getNormal(vec3 p) {
	vec3 n1 = vec3(
        scene(vec3(p.x + EPSILON, p.y, p.z)),
        scene(vec3(p.x, p.y + EPSILON, p.z)),
        scene(vec3(p.x, p.y, p.z + EPSILON))
    );
    return normalize(n1 - scene(p));
}

float diffuse(vec3 normal, vec3 lightRay, float intensity) {
    return clamp(dot(lightRay, normal) * intensity, 0.0, 1.0);
}

float specular(vec3 reflectAngle, vec3 lightRay, float shininess) {
    return pow(clamp(dot(reflectAngle, lightRay), 0.0, 1.0), shininess);
}

void main()
{
    // rays start from the camera
    vec3 rayOrigin = vec3(0., 0., 5.0);
    vec3 rayDirection = normalize(vec3(vUv*2.0-1.0, -1.0));
    
    // multiplying the vector by the matrix rotates it in space
    // think of this as rotating the camera around the origin point
    rayOrigin = (vRotation * camera * vec4(rayOrigin, 1.0)).xyz;
    rayDirection = normalize(vRotation * camera * vec4(rayDirection, 0.0)).xyz;
    
    float minStep = 0.25;
    float distance = minStep * 2.0;
    vec3 currentPos = rayOrigin;
    const int MAX_STEPS = 15;
    int stepped = 0;
    
    // raymarching time!
    // start at the camera position and head towards the current pixel
    // (current pixel depends on fov)
    for(int i=0; i<MAX_STEPS; i++) {
        // each step, move ahead as far as we can
        // if we know that the closest object is distance away, we can move at least that far
     	currentPos += abs(distance - minStep) * rayDirection;
        // find the distance to the closest edge
        distance = scene(currentPos);
        if(distance < minStep) {
            stepped = i;
			break;
        }
    }

    // TODO: fix this
    //gl_FragDepthEXT = length(currentPos - (vRotation * camera * vec4(0,0,0,1.)).xyz);
    
    // if we've stepped all the way and we aren't close to the surface, we've probably gone past it
    // so default to background and skip lighting calculations
    if(distance > 1.0) {
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
        discard;
    }
    
    float detail = detailMap(currentPos);
    float dirt = dirtMap(vUv.xyy * 2.0);
    
    vec3 lightPos = (vRotation * camera * vec4(-10.0, 4.0, 10.0, 1.0)).xyz;
    vec3 lightColor = vec3(3.0, 0.0, 0.0);
    vec3 lightDiff = lightPos - currentPos;
    
    vec3 directionToLight = normalize(lightDiff);
	float distanceToLight = length(lightDiff);
    
    vec3 normal = getNormal(currentPos);
    vec3 reflectAngle = reflect(rayDirection, normal);
    
    vec3 color = vec3(0.5, 0.1, 0.5);
    float diffuseFactor = diffuse(normal, directionToLight, 1.0);
    float specularFactor = specular(reflectAngle, directionToLight, 32.0*(dirt+0.5));
    float ambient = 0.3;
    
    vec3 final = (clamp(diffuseFactor-dirt*0.1, 0.0, 1.0)) * color +
        		(clamp(specularFactor-detail, 0.0, 1.0)) * lightColor +
        		vec3(ambient);
    
	gl_FragColor = vec4(final, 1.0);
}