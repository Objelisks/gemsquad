//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }




// allow support of gl_FragDepth writing in webgl
// extension also needs to be enabled on context (see renderer.js)
#extension GL_EXT_frag_depth : enable

varying vec2 vuv;
uniform mat4 camera;
uniform vec2 res;
uniform float time;
uniform float korg[8];

float EPSILON = 0.1;
const int MAX_STEPS = 100;



float noise(vec3 p) {
  return sin(p.x) * sin(p.y) * sin(p.z);
  //return snoise(p / 5.0);
}

float fbm(vec3 p) {
  return noise(p + vec3(noise(p) + 50.0, noise(p), noise(p) + 20.0));
}

float pattern(vec3 p) {
  p.y += 10.0;
  float distortion = fbm(p * 0.5) / 0.5;
  distortion += fbm(p * 0.25) / 0.25;
  distortion += fbm(p * 0.125) / 0.125;
  distortion += fbm(p * 0.0625) / 0.0625;

  vec4 ground = vec4(0, 0.5, 0, 0.5);
  ground.w += distortion;
  ground = normalize(ground);
  //return dot(p, ground.xyz) + ground.w;
  return p.y*0.1 + (distortion-0.4) * (1.0-smoothstep(1.0, 3.0, p.y/5.0));
}




float dist_sphere(vec3 p, vec3 c, float r) {
	return length(p - c) - r;
}

float dist_plane(vec3 p, vec4 n) {
	p += vec3(10.0, 0.0, 10.0);
	float n1 = snoise(p / 10.0);
	float n2 = snoise(p / 2.0);
	float n3 = snoise(p * 10.0);
	n.w += n1 / 1.0 + n2 / (n1*5.0+5.0) + n3 / ((1.0-n2)*100.0+100.0) - 1.0;
  //n.w += n1;
	n = normalize(n);
	return dot(p,n.xyz) + n.w;
}

float scene(vec3 p) {
	//return dist_plane(p, vec4(0,0.5,0,0.5));
  return pattern(p);
}

/*
	Gets the normal direction at a given point in space.
	Compute the derivative of each spatial direction.
*/
vec3 getNormal(vec3 p, float d) {
	vec3 n1 = vec3(
        scene(vec3(p.x + EPSILON, p.y, p.z)),
        scene(vec3(p.x, p.y + EPSILON, p.z)),
        scene(vec3(p.x, p.y, p.z + EPSILON))
    );
	vec3 n2 = vec3(
        scene(vec3(p.x - EPSILON, p.y, p.z)),
        scene(vec3(p.x, p.y - EPSILON, p.z)),
        scene(vec3(p.x, p.y, p.z - EPSILON))
    );
  return normalize(n1 - d);
}

float diffuse(vec3 normal, vec3 lightRay, float intensity) {
  return clamp(dot(lightRay, normal) * intensity, 0.0, 1.0);
}

float specular(vec3 reflectAngle, vec3 lightRay, float shininess) {
  return pow(clamp(dot(reflectAngle, lightRay), 0.0, 1.0), shininess);
}

// k is inv proportional to the radius of the light
float softshadow(in vec3 ro, in vec3 rd, float k)
{
  float result = 1.0;
  float t = 0.01;
  for( int i=0; i<30; i++ )
  {
    float dist = scene(ro + rd*t);

    // cone
    result = min( result, k*dist/t );
	  t += max(dist, 0.1);
	if( dist< 0.0001 ) break;
  }
  return clamp(result,0.0,1.0);
}

void main() {
	// doo some ray march ing

	float aspectRatio = res.y / res.x;
	vec2 coords = vuv * 2.0 - 1.0;
	coords.x *= 2.0;

	// use the actual scene camera transform to rotate/translate the ray origin/dir
	vec3 rayOrigin = (camera * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec3 rayDirection = (camera * vec4(normalize(vec3(coords, -1.0)), 0.0)).xyz;

	float minStep = 0.00001;
	float distance = 0.0;
  float t = 0.5;

	for(int i=0; i<MAX_STEPS; i++) {
		distance = scene(rayOrigin + t * rayDirection);
		if(abs(distance) < minStep) {
			break;
		}
    t += distance;
	}
	//distance = clamp(distance, 0.0, 1.0);

  vec3 currentPos = rayOrigin + t * rayDirection;

	// alternative var to write to for depth
	gl_FragDepthEXT = t;

	if(distance > 1.0) {
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
		return;
	}

	vec3 normal = getNormal(currentPos, distance);
	vec3 color = vec3(0.0, 0.6, 0.9);
	vec3 lightColor = vec3(0.8, 0.88, 0.8);
	vec3 lightPos = normalize(vec3(0.0*korg[0], 1.0*korg[1], -2.0*korg[2]));
	vec3 reflectAngle = reflect(rayDirection, normal);
	float diffComp = diffuse(normal, lightPos, 1.0);
	float specComp = specular(reflectAngle, lightPos, 2.0);
	float ambient = 0.2;
	float shadow = softshadow(currentPos + 0.1 * normal, lightPos, 128.0);

	gl_FragColor = vec4(color * clamp(max(diffComp,ambient), 0.0, 1.0) * clamp(max(shadow,ambient), 0.0, 1.0) + lightColor * specComp * shadow / 3.0, 1.0);
}
