// allow support of gl_FragDepth writing in webgl
// extension also needs to be enabled on context (see renderer.js)
#extension GL_EXT_frag_depth : enable

varying vec2 vuv;
uniform mat4 camera;
uniform vec2 res;
uniform float time;
uniform float korg[8];

float EPSILON = 0.001;
float PI = 3.1415;
const int MAX_STEPS = 200;

struct mat {
  float dist;
  vec3 color;
};

float rand(vec3 co){
    return fract(sin(dot(co.xyz ,vec3(12.9898,78.233,124.5432))) * 43758.5453);
}

vec4 dnoise(vec3 p)
{
    float i, j, k;
    float u, v, w;

	i = floor(p.x);
	u = fract(p.x);
	j = floor(p.y);
	v = fract(p.y);
	k = floor(p.z);
	w = fract(p.z);

    float du = 30.0*u*u*(u*(u-2.0)+1.0);
    float dv = 30.0*v*v*(v*(v-2.0)+1.0);
    float dw = 30.0*w*w*(w*(w-2.0)+1.0);

    u = u*u*u*(u*(u*6.0-15.0)+10.0);
    v = v*v*v*(v*(v*6.0-15.0)+10.0);
    w = w*w*w*(w*(w*6.0-15.0)+10.0);

    float a = rand(vec3(i+0., j+0., k+0.));
    float b = rand(vec3(i+1., j+0., k+0.));
    float c = rand(vec3(i+0., j+1., k+0.));
    float d = rand(vec3(i+1., j+1., k+0.));
    float e = rand(vec3(i+0., j+0., k+1.));
    float f = rand(vec3(i+1., j+0., k+1.));
    float g = rand(vec3(i+0., j+1., k+1.));
    float h = rand(vec3(i+1., j+1., k+1.));

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return vec4(k0 + k1*u + k2*v + k3*w + k4*u*v + k5*v*w + k6*w*u + k7*u*v*w,
    	du * (k1 + k4*v + k6*w + k7*v*w),
    	dv * (k2 + k5*w + k4*u + k7*w*u),
    	dw * (k3 + k6*u + k5*v + k7*u*v));
}

float fbm(vec3 p, float lac) {
	float f = 0.;
	float w = lac;
	for(int i=0; i < 3; i++) {
		vec4 n = dnoise(p);
		f += w * n.x / (1.0 + n.y*n.y + n.z*n.z + n.w*n.w);
		w *= lac;
		p *= 2.0;
	}
	return f;
}

float smin( float a, float b, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return mix( b, a, h ) - k*h*(1.0-h);
}

mat cmin(mat a, float k, mat b) {
  //return a.x < b.x ? a : b;
  float h = clamp( 0.5+0.5*(b.dist-a.dist)/k, 0.0, 1.0 );
  return mat(mix( b.dist, a.dist, h ) - k*h*(1.0-h), mix( b.color, a.color, h ) - k*h*(1.0-h));
}

mat u(mat a, mat b) {
	return a.dist < b.dist ? a : b;
}

mat i(mat a, mat b) {
	return a.dist > b.dist ? a : b;
}

mat d(mat a, mat b) {
	return -a.dist > b.dist ? mat(-a.dist, a.color) : b;
}

float plane(vec3 p, vec4 n) {
	return dot(p, n.xyz) + n.w;
}

float holes(vec3 p) {
	vec3 q = mod(p, 10.) - .5;
	q.y = p.y;
	return length(q - 5.) - 2.0 * korg[0];
}

float stone(vec3 p) {
	float chip = p.y;
	chip = max(chip, plane(p, normalize(vec4(1, 1., 1., -2.))));
	chip = max(chip, plane(p, normalize(vec4(-1, 1., 1., -2.))));
	chip = max(chip, plane(p, normalize(vec4(-1, 1., -1., -2.))));
	chip = max(chip, plane(p, normalize(vec4(1, 1., -1., -2.))));
	return chip;
}

mat scene(vec3 p) {

	p /= 5.0;
	p.y -= 5.0;
  mat pyr = d(mat(p.y + fbm(p + vec3(time, 0., 0.), 0.5)*20.0, vec3(0.7)), mat(stone(p), vec3(0.7, 0.2, 0.2)));
  pyr.dist *= 5.0;
  return pyr;
}

/*
	Gets the normal direction at a given point in space.
	Compute the derivative of each spatial direction.
*/
vec3 getNormal(vec3 p, float d) {
	vec3 n1 = vec3(
        scene(vec3(p.x + EPSILON, p.y, p.z)).dist,
        scene(vec3(p.x, p.y + EPSILON, p.z)).dist,
        scene(vec3(p.x, p.y, p.z + EPSILON)).dist
    );
  return normalize(n1 - d);
}

float diffuse(vec3 normal, vec3 lightRay, float intensity) {
  return clamp(dot(lightRay, normal) * intensity, 0.0, 1.0);
}

float specular(vec3 reflectAngle, vec3 lightRay, float shininess) {
  return pow(clamp(dot(reflectAngle, lightRay), 0.0, 1.0), shininess);
}

// k is inv proportional to the radius of the light
float softshadow(in vec3 ro, in vec3 rd, float k)
{
  float result = 1.0;
  float t = 0.01;
  for( int i=0; i<30; i++ )
  {
    float dist = scene(ro + rd*t).dist;

    // cone
    result = min( result, k*dist/t );
	t += dist*0.99;
    if( dist< EPSILON ) break;
  }
  return clamp(result,0.0,1.0);
}

void main() {
	// doo some ray march ing
	
	float aspectRatio = res.y / res.x;
	vec2 coords = vuv * 2.0 - 1.0;
	coords.x *= 2.0;
	
	// use the actual scene camera transform to rotate/translate the ray origin/dir
	vec3 rayOrigin = (camera * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec3 rayDirection = (camera * vec4(normalize(vec3(coords, -1.0)), 0.0)).xyz;
	
	float minStep = 0.1;
	mat distance = mat(0., vec3(0.0));
	float t = 0.5;
	
	for(int i=0; i<MAX_STEPS; i++) {
		distance = scene(rayOrigin + t * rayDirection);
		if(abs(distance.dist) <= EPSILON) {
			break;
		}
		t += distance.dist * 0.9;
	}
	
	vec3 currentPos = rayOrigin + t * rayDirection;
	
	// alternative var to write to for depth
	// TODO: this is not correct: http://iquilezles.org/www/articles/raypolys/raypolys.htm
	gl_FragDepthEXT = t;
	
	if(distance.dist > EPSILON) {
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
		return;
	}
	
	vec3 normal = getNormal(currentPos, distance.dist);
	vec3 color = distance.color;
	vec3 lightColor = vec3(0.8, 0.88, 0.8);
	vec3 lightPos = normalize(vec3(1.0, 1.0, 2.0));
	vec3 reflectAngle = reflect(rayDirection, normal);
	float attenuation = 1.0 / (1.0 + 0.00002*pow( length(currentPos - rayOrigin), 3.0));
	
	float diffComp = diffuse(normal, lightPos, 1.0) * attenuation;
	float specComp = specular(reflectAngle, lightPos, 2.0) * attenuation;
	float ambient = 0.2;
	float shadow = softshadow(currentPos + 0.001 * normal, lightPos, 16.0);
	
	
	gl_FragColor = vec4(color * clamp(max(diffComp,ambient), 0.0, 1.0) * clamp(max(shadow,ambient), 0.0, 1.0) + lightColor * specComp * shadow / 3.0, 1.0);
}
